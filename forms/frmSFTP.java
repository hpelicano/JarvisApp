/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package com.fiserv.jarvis.forms;

import com.fiserv.jarvis.utils.ConexionExecSSH;
import com.fiserv.jarvis.utils.Utils;
import com.jcraft.jsch.Channel;
import com.jcraft.jsch.ChannelSftp;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.Session;
import java.io.File;
import java.util.List;
import java.util.Properties;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author f1w1jf7
 */
public class frmSFTP extends javax.swing.JInternalFrame {

    /**
     * Creates new form frmSFTP
     */
    public frmSFTP() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstTandemFiles = new javax.swing.JList<>();
        txtVolumen = new javax.swing.JTextField();
        btnConnect = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btnUpload = new javax.swing.JButton();
        btnDownload = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        lstLocalFiles = new javax.swing.JList<>();
        cboxCarpetas = new javax.swing.JComboBox<>();
        btnView = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtOutFilename = new javax.swing.JTextField();
        lblComando = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtInFilename = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtRecordNumber = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtRecordCount = new javax.swing.JTextField();
        txtDestFilter = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtSourceFilter = new javax.swing.JTextField();
        btnExecute = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setTitle("File Transfer Window");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(0, 102, 153));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane2.setViewportView(lstTandemFiles);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 70, 240, 200));

        txtVolumen.setText("/G/data26/jarvaudt");
        jPanel1.add(txtVolumen, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 40, 150, -1));

        btnConnect.setText("Connect");
        btnConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectActionPerformed(evt);
            }
        });
        jPanel1.add(btnConnect, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 40, 80, -1));

        jLabel1.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 3, true), "Remote Tandem Files:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 20, 260, 260));

        btnUpload.setText("<<Upload");
        btnUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadActionPerformed(evt);
            }
        });
        jPanel1.add(btnUpload, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 120, 110, 30));

        btnDownload.setText("Download>>");
        btnDownload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDownloadActionPerformed(evt);
            }
        });
        jPanel1.add(btnDownload, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 200, 110, 30));

        jScrollPane3.setViewportView(lstLocalFiles);

        jPanel1.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 70, 210, 200));

        cboxCarpetas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<none>", "Audit", "Temp" }));
        jPanel1.add(cboxCarpetas, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 40, 120, -1));

        btnView.setText("View");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });
        jPanel1.add(btnView, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 40, 80, -1));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 3, true), "Local Files:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 20, 230, 260));

        txtOutFilename.setText("$data26.jarvaudt.");
        txtOutFilename.setToolTipText("Out filename: $data26.jarvaudt.<filename>");
        jPanel1.add(txtOutFilename, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 50, 200, -1));

        lblComando.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N
        lblComando.setForeground(new java.awt.Color(255, 255, 255));
        lblComando.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 102), 3, true), "Command Executed:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(255, 255, 102))); // NOI18N
        jPanel1.add(lblComando, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 290, 960, 50));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Filename OUT:");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 50, 90, 20));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Filename IN:");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, 90, 20));

        txtInFilename.setToolTipText("Input Audit Filename");
        jPanel1.add(txtInFilename, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 80, 200, -1));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("First Record:");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 170, 90, 20));

        txtRecordNumber.setToolTipText("Firt record where we want to start copy");
        jPanel1.add(txtRecordNumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 170, 100, -1));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Count Records:");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 200, 90, 20));

        txtRecordCount.setToolTipText("Number of records we want to copy");
        jPanel1.add(txtRecordCount, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 200, 100, -1));

        txtDestFilter.setToolTipText("Destination Filter ( Process or Station )");
        jPanel1.add(txtDestFilter, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 140, 200, -1));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Dest. Filter:");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 140, 90, 20));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Source Filter:");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, 90, 20));

        txtSourceFilter.setToolTipText("Source Filter ( Process or Station )");
        jPanel1.add(txtSourceFilter, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 110, 200, -1));

        btnExecute.setText("Execute");
        btnExecute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExecuteActionPerformed(evt);
            }
        });
        jPanel1.add(btnExecute, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 240, 290, -1));

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });
        jPanel1.add(btnClear, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 170, -1, 50));

        jLabel10.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 3, true), "Extract Audit Records:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 330, 260));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 980, 360));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
       DefaultListModel listModel = new DefaultListModel();

        String origen = "";

        if(cboxCarpetas.getSelectedItem().equals("Audit")){
            origen = audit;
        }
        if(cboxCarpetas.getSelectedItem().equals("Temp")){
            origen = temp;
        }

        if(Utils.checkFileOrDirectory(origen)){
            File[] files = Utils.getFilesFromDirectory(origen);

            if(files.length > 0){
                for(File f : files){
                    listModel.addElement(f.toString());
                }

                lstLocalFiles.setModel(listModel);
            }else{
               JOptionPane.showMessageDialog(null, "No hay archivo en el Directorio Seleccionado.");
            }
        }
       
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectActionPerformed
        DefaultListModel listModel = new DefaultListModel();
        
        ConexionExecSSH conn =new ConexionExecSSH();
        
        Session session = conn.ConnectSSH(user, pass, host, Integer.parseInt(port));
        
        String comando = "ls " + txtVolumen.getText();
        
        List<String> lista = conn.sendMessageSSH(session, comando);
        
        for(String s : lista){
            listModel.addElement(s.toString());
        }
        
        lstTandemFiles.setModel(listModel);
        
    }//GEN-LAST:event_btnConnectActionPerformed

    private void btnDownloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDownloadActionPerformed
        
        try{
            Properties p =new Properties();
            p.setProperty("StrictHostKeyChecking","no");
            
            Session session = jsch.getSession(user, host, Integer.parseInt(port));
            session.setConfig(p);
            session.setPassword(pass);
            session.connect();  
            
            Channel sftp = session.openChannel("sftp");
            
            sftp.connect();

            ChannelSftp channelSftp = (ChannelSftp) sftp;
            
            String destino = "";
            
            if(cboxCarpetas.getSelectedItem().equals("Audit")){
                destino = audit + "\\\\" + lstTandemFiles.getSelectedValue();
            }else if(cboxCarpetas.getSelectedItem().equals("Temp")){
                destino = temp + "\\\\" + lstTandemFiles.getSelectedValue();
            }else{ //lo mando por default para no tener errores.
                destino = audit + "\\\\" + lstTandemFiles.getSelectedValue();
            }
            
            // download file from remote server to local
            channelSftp.get(txtVolumen.getText()+"/"+lstTandemFiles.getSelectedValue(),
                        destino);
            
            sftp.disconnect();
            
            JOptionPane.showMessageDialog(null, "Download File succesfully.");
            
        }catch(Exception e){
            System.out.println(e.getMessage());
        }
        
        
    }//GEN-LAST:event_btnDownloadActionPerformed

    private void btnExecuteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExecuteActionPerformed
        String comando = "";
        
        if( !txtOutFilename.getText().isEmpty() && !txtInFilename.getText().isEmpty()   && 
            !txtRecordNumber.getText().isEmpty() && !txtRecordCount.getText().isEmpty()  ){
            
            String out = txtOutFilename.getText();
            String in  = txtInFilename.getText();
            String recNum = txtRecordNumber.getText();
            String recCount = txtRecordCount.getText();
            
            if(!txtSourceFilter.getText().isEmpty() && !txtDestFilter.getText().isEmpty()){
                String source = txtSourceFilter.getText();
                String dest   = txtDestFilter.getText();
                
                comando = "gtacl -c 'netadrd /OUT " + out + "/" + in + ", S\"" + source + "\",D\""+ dest + "\" ,first " + recNum + ", count " + recCount + "'"; 
                lblComando.setText(comando);
            }else{
                comando = "gtacl -c 'netadrd /OUT " + out + "/" + in + ",first " + recNum + ", count " + recCount + "'";
                lblComando.setText(comando);
            }
            
            //mando el comando al tandem
            try{
                
                ConexionExecSSH conn =new ConexionExecSSH();
                Session session = conn.ConnectSSH(user, pass, host, Integer.parseInt(port));

                List<String> lista = conn.sendMessageSSH(session, comando);
                
                if (lista == null){
                    JOptionPane.showMessageDialog(null,"Error - verificar los datos de origen y destino.");
                }else{
                    JOptionPane.showMessageDialog(null,"Se ha ejecutado el comando correctamente.");
                }
                
                JOptionPane.showMessageDialog(null, "Execution Command succesfully.");
                
            }catch(Exception e){
                JOptionPane.showMessageDialog(null, "Connetion Error: " + e.getMessage());
            }
                    
        }else{
            JOptionPane.showMessageDialog(null, "Complete the info into the textbox.");
        }
         
    }//GEN-LAST:event_btnExecuteActionPerformed

    private void btnUploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadActionPerformed
        
        try{
            Properties p =new Properties();
            p.setProperty("StrictHostKeyChecking","no");
            
            Session session = jsch.getSession(user, host, Integer.parseInt(port));
            session.setConfig(p);
            session.setPassword(pass);
            session.connect();  
            
            Channel sftp = session.openChannel("sftp");
            
            sftp.connect();

            ChannelSftp channelSftp = (ChannelSftp) sftp;
                        
            String[] campos = lstLocalFiles.getSelectedValue().split("\\\\");
            
            
            System.out.println(txtVolumen.getText() + "/" + campos[3]);
            System.out.println(lstLocalFiles.getSelectedValue());
            
            // Local file To remote host
            channelSftp.put(lstLocalFiles.getSelectedValue(), 
                            txtVolumen.getText() + "/" + campos[3]);
            
            sftp.disconnect();
            
            JOptionPane.showMessageDialog(null, "Upload File succesfully.");
            
            
        }catch(Exception e){
            System.out.println(e.getMessage());
        }
        
    }//GEN-LAST:event_btnUploadActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        txtOutFilename.setText("$data26.jarvaudt.");
        txtInFilename.setText("");
        txtDestFilter.setText("");
        txtSourceFilter.setText("");        
        txtRecordCount.setText("");
        txtRecordNumber.setText("");  
        lblComando.setText("");        
    }//GEN-LAST:event_btnClearActionPerformed

    
    private String audit = Utils.getProperty( propertyFile , "directory.root.Audit");
    private String temp  = Utils.getProperty( propertyFile , "directory.root.Temp");
    private String host  = Utils.getProperty( propertyFile , "config_env.desarrollo.dns");
    private String user  = Utils.getProperty( propertyFile , "config_env.desarrollo.user"); 
    private String pass  = Utils.getProperty( propertyFile , "config_env.desarrollo.pass"); 
    private String port  = Utils.getProperty( propertyFile , "config_port.ssh"); 
    private JSch jsch =new JSch();
    private static String propertyFile = "C:\\Jarvis\\Config\\Properties";

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnConnect;
    private javax.swing.JButton btnDownload;
    private javax.swing.JButton btnExecute;
    private javax.swing.JButton btnUpload;
    private javax.swing.JButton btnView;
    private javax.swing.JComboBox<String> cboxCarpetas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblComando;
    private javax.swing.JList<String> lstLocalFiles;
    private javax.swing.JList<String> lstTandemFiles;
    private javax.swing.JTextField txtDestFilter;
    private javax.swing.JTextField txtInFilename;
    private javax.swing.JTextField txtOutFilename;
    private javax.swing.JTextField txtRecordCount;
    private javax.swing.JTextField txtRecordNumber;
    private javax.swing.JTextField txtSourceFilter;
    private javax.swing.JTextField txtVolumen;
    // End of variables declaration//GEN-END:variables
}
